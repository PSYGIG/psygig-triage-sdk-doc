
.. _program_listing_file_include_psygigsdk.h:

Program Listing for File psygigsdk.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_psygigsdk.h>` (``include/psygigsdk.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef PSYGIGSDK_H_
   #define PSYGIGSDK_H_
   
   #include <stdint.h>
   #include <stdio.h>
   
   #ifdef __cplusplus
   extern "C" {
   #endif
   
   #if defined _WIN32 || defined __CYGWIN__
     #ifdef WIN_EXPORT
       // Exporting...
       #ifdef __GNUC__
         #define PSYGIG_API __attribute__ ((dllexport))
       #else
         #define PSYGIG_API __declspec(dllexport) // Note: actually gcc seems to also supports this syntax.
       #endif
     #else
       #ifdef __GNUC__
         #define PSYGIG_API __attribute__ ((dllimport))
       #else
         #define PSYGIG_API __declspec(dllimport) // Note: actually gcc seems to also supports this syntax.
       #endif
     #endif
     #define NOT_EXPORTED
   #else
     #if __GNUC__ >= 4
       #define PSYGIG_API __attribute__ ((visibility ("default")))
       #define NOT_EXPORTED  __attribute__ ((visibility ("hidden")))
     #else
       #define PSYGIG_API
       #define NOT_EXPORTED
     #endif
   #endif
   
   //---------------------------------------------------------------------
   //  PSYGIG Triage SDK API Declarations
   //---------------------------------------------------------------------
   
   
   enum PSYGIG_ERROR
   {
       PSYGIG_ERROR_SUCCESS = 0,
       PSYGIG_ERROR_INVALID_PARAMETER,
       PSYGIG_ERROR_NOT_YET_IMPLEMENTED,
       PSYGIG_ERROR_METRIC_NOT_FOUND,
       PSYGIG_ERROR_FILE_NOT_FOUND,
       PSYGIG_ERROR_OPEN_FAILED,
       PSYGIG_ERROR_CLOSE_FAILED,
       PSYGIG_ERROR_SEEK_FAILED,
       PSYGIG_ERROR_READ_FAILED,
       PSYGIG_ERROR_WRITE_FAILED,
       PSYGIG_ERROR_FLUSH_FAILED,
       PSYGIG_ERROR_ACCESS_DENIED,
       PSYGIG_ERROR_INVALID_DATA,
       PSYGIG_ERROR_NO_DATA,
       PSYGIG_ERROR_SIGNATURE_MISMATCH,
       PSYGIG_ERROR_CHECKSUM_MISMATCH,
       PSYGIG_ERROR_INSUFFICIENT_MEMORY,
       PSYGIG_ERROR_INSUFFICIENT_SPACE,
       PSYGIG_ERROR_THREAD_CREATE,
       PSYGIG_ERROR_MUTEX_INIT,
       PSYGIG_ERROR_REST_INIT
   };
   
   typedef struct _psygig_cfg {
       // controller settings
       char *host;
       int port;
       int ssl;
       char* proxy_host;
       char* proxy_port;
       char* proxy_user;
       char* proxy_pass;
   
       // authentication settings (optional? no need for users to have account before viewing results on web. can associate with account later?)
       char *account;
       char *key;
       char *deviceid; // read from autogen config file? controller auto detect via hardware specs? appear as new device on account? let user assoicate with existing device later?
   
   } psygig_cfg;
   
   typedef void* psygig_agent_handle;
   
   PSYGIG_API const char* psygig_agent_get_version( void );
   
   PSYGIG_API int psygig_agent_init_config(psygig_cfg *cfg);
   
   PSYGIG_API int psygig_agent_init(psygig_agent_handle *handle, psygig_cfg *cfg);
   
   PSYGIG_API int psygig_agent_cleanup(psygig_agent_handle *handle);
   
   typedef enum _psygig_sink_data_format
   {
       PSYGIG_DATA_FORMAT_TEXT,
       PSYGIG_DATA_FORMAT_CSV,
       PSYGIG_DATA_FORMAT_JSON,
       PSYGIG_DATA_FORMAT_YAML,
       PSYGIG_DATA_FORMAT_INFLUX,
   } psygig_sink_data_format;
   
   typedef enum _psygig_sink_type
   {
       PSYGIG_SINK_FILE,
       PSYGIG_SINK_FSTREAM,
       PSYGIG_SINK_UDP,
       PSYGIG_SINK_TCP,
       PSYGIG_SINK_MQTT,
       PSYGIG_SINK_HTTP,
       PSYGIG_SINK_INFLUXDB
   } psygig_sink_type;
   
   typedef struct _psygig_sink_file_cfg {
       char dir[256];
       char basename[256];
       int maxsize;
       int maxfiles;
       int rotate;
   } psygig_sink_file_cfg;
   
   typedef struct _psygig_sink_fstream_cfg {
       FILE *fd;
   } psygig_sink_fstream_cfg;
   
   typedef struct _psygig_sink_udp_cfg {
       char *host;
       int port;
   } psygig_sink_udp_cfg;
   
   typedef struct _psygig_sink_tcp_cfg {
       char *host;
       int port;
   } psygig_sink_tcp_cfg;
   
   typedef struct _psygig_sink_mqtt_cfg {
       char *host;
       int port;
   } psygig_sink_mqtt_cfg;
   
   typedef struct _psygig_sink_http_cfg {
       char host[256];
       int port;
       int secure;
   } psygig_sink_http_cfg;
   
   typedef struct _psygig_sink_influxdb_cfg {
       char *host;
       int port;
   } psygig_sink_influxdb_cfg;
   
   typedef struct _psygig_sink_cfg {
       psygig_sink_type type;
       psygig_sink_data_format format;
       union {
           psygig_sink_file_cfg file;
           psygig_sink_fstream_cfg fstream;
           psygig_sink_udp_cfg udp;
           psygig_sink_tcp_cfg tcp;
           psygig_sink_mqtt_cfg mqtt;
           psygig_sink_http_cfg http;
           psygig_sink_influxdb_cfg influxdb;
       };
   } psygig_sink_cfg;
   
   PSYGIG_API int psygig_agent_add_sink(psygig_agent_handle handle, psygig_sink_cfg* cfg);
   
   PSYGIG_API int psygig_agent_remove_sink(psygig_agent_handle handle, int index);
   
   PSYGIG_API int psygig_agent_get_num_sinks(psygig_agent_handle handle, int *numsinks);
   
   PSYGIG_API int psygig_agent_get_sink_info(psygig_agent_handle handle, int index, psygig_sink_cfg* sinkinfo);
   
   PSYGIG_API int psygig_agent_start_session(psygig_agent_handle handle, char *sessionname);
   
   #define MAX_PSYGIG_SESSION_NAME_LENGTH      64
   #define MAX_DEVICE_ID_LENGTH                128
   
   typedef struct _psygig_session_info {
       char name[MAX_PSYGIG_SESSION_NAME_LENGTH + 1];
       char deviceid[MAX_DEVICE_ID_LENGTH + 1];
       uint64_t timestamp;
       uint64_t duration;
       uint64_t nummetrics;
       uint64_t numevents;
   } psygig_session_info;
   
   PSYGIG_API int psygig_agent_get_current_session(psygig_agent_handle handle, psygig_session_info *session);
   
   PSYGIG_API int psygig_agent_stop_session(psygig_agent_handle handle);
   
   enum { PSYGIG_DBGLVL_DISABLE, PSYGIG_DBGLVL_FATAL, PSYGIG_DBGLVL_ERROR, PSYGIG_DBGLVL_WARN, PSYGIG_DBGLVL_INFO, PSYGIG_DBGLVL_DEBUG, PSYGIG_DBGLVL_TRACE, PSYGIG_DBGLVL_MIN = PSYGIG_DBGLVL_DISABLE, PSYGIG_DBGLVL_MAX = PSYGIG_DBGLVL_TRACE };
   
   PSYGIG_API int psygig_agent_set_debug_level(psygig_agent_handle handle, int level);
    // end of admin
   
   PSYGIG_API int psygig_metric_enable_poll_system_resources(psygig_agent_handle handle, int periodms);
   
   PSYGIG_API int psygig_metric_record_values_numeric(psygig_agent_handle handle, char *names[], float values[], int nummetrics);
   
   PSYGIG_API int psygig_metric_record_values_string(psygig_agent_handle handle, char *names[], char *values[], int nummetrics);
   
   PSYGIG_API int psygig_metric_record_values_blob(psygig_agent_handle handle, char *names[], void *values, int valuesize, int nummetrics);
   
   typedef struct _psygig_pointcloud_data
   {
       float x;
       float y;
       float z;
       unsigned int rgb;
   } psygig_pointcloud_data;
   
   PSYGIG_API int psygig_metric_record_pointcloud(psygig_agent_handle handle, char *name, psygig_pointcloud_data *value, int numpoints);
   
   PSYGIG_API int psygig_metric_get_values_numeric(psygig_agent_handle handle, char *name, unsigned long long timestamps[], float values[], int *numvalues);
   
   PSYGIG_API int psygig_metric_get_values_string(psygig_agent_handle handle, char *name, unsigned long long timestamps[], char* values[], int *numvalues);
   
   PSYGIG_API int psygig_metric_get_values_blob(psygig_agent_handle handle, char *name, unsigned long long timestamps[], void* values, int valuesize, int *numvalues);
   
   PSYGIG_API int psygig_metric_export_report(psygig_agent_handle handle, char* path);
   
   typedef enum _psygig_metric_file_type
   {
       PSYGIG_METRIC_FILE_CSV,
       PSYGIG_METRIC_FILE_TEXT,
       PSYGIG_METRIC_FILE_JSON,
       PSYGIG_METRIC_FILE_YAML,
       PSYGIG_METRIC_FILE_PCD
   } psygig_metric_file_type;
   
   PSYGIG_API int psygig_metric_import_file(psygig_agent_handle handle, psygig_metric_file_type type, char* path );
    // end of metric
   
   typedef enum _psygig_event_level
   {
       PSYGIG_EVENT_LEVEL_INFO,
       PSYGIG_EVENT_LEVEL_WARNING,
       PSYGIG_EVENT_LEVEL_ERROR,
       PSYGIG_EVENT_LEVEL_CRITICAL,
       PSYGIG_EVENT_NUM_LEVELS
   } psygig_event_level;
   
   PSYGIG_API int psygig_event_report(psygig_agent_handle handle, psygig_event_level level, char *source, int eventid, const char* message);
   
   PSYGIG_API int psygig_event_enable_auto_report_os_faults(psygig_agent_handle handle, int enable);
   
   PSYGIG_API int psygig_event_import_file(psygig_agent_handle handle, char *path);
    // end of event
   
   typedef enum _psygig_log_level
   {
       PSYGIG_LOG_LEVEL_DEBUG,
       PSYGIG_LOG_LEVEL_INFO,
       PSYGIG_LOG_LEVEL_WARNING,
       PSYGIG_LOG_LEVEL_ERROR,
       PSYGIG_LOG_LEVEL_FATAL
   } psygig_log_level;
   
   PSYGIG_API int psygig_logf(psygig_agent_handle handle, psygig_log_level level, char *format, ...);
   
   #ifdef __cplusplus
   extern std::ostream psygig_log;
   #endif
   
   enum {
       PSYGIG_LOG_FLAG_NONE = 0,
       PSYGIG_LOG_FLAG_SYSLOG = 1 << 0,    
       PSYGIG_LOG_FLAG_OLD = 1 << 16,
       PSYGIG_LOG_FLAG_COMPRESSED = 1 << 17,
       PSYGIG_LOG_FLAG_ALL = 0xffffffff
   };
   
   PSYGIG_API int psygig_log_import_file(psygig_agent_handle handle, char *path, uint32_t flags);
   
   PSYGIG_API int psygig_log_glob_free(char *filelist[], uint32_t *flagslist, int numfiles);
   
   PSYGIG_API int psygig_log_glob_known_log_files(char **filelist[], uint32_t *flagslist[], int* numfiles );
   
   PSYGIG_API int psygig_log_monitor_log_file(psygig_agent_handle handle, char *path, int periodms);
    // end of log
   
   // Reference: sololink/flightcode/video/vid/vidlaunch.cpp
   typedef struct _psygig_video_cfg {
       /* We can currently control one of two things: framerate or bitrate.
       * the vary_framerate switch indicates which one to use.
       */
       int vary_framerate; // Whether or not to vary framerate as the control knob
   
                            /* The min/max bitrate and framerate values (come from sololink.conf) */
       int min_framerate;
       int max_framerate;
       int min_bitrate;
       int max_bitrate;
   
       /* The step at which the bitrate/framerate should be incremented/decremented
       * per second based on the retry count */
       int framerate_step;
       int bitrate_step;
   
       /* Variable stream resolution.  This means that the
       * video streamed to the Artoo will vary in width/height based
       * on the input resolution coming from the HDMI input.
       */
       int var_stream_res;
   
       /* Whether or not to crop the recorded 480p resolution */
       int crop_record_res;
   } psygig_video_cfg;
   
   typedef void* psygig_video_handle;
   
   PSYGIG_API int psygig_video_stream_start(psygig_agent_handle handle, char *viddev, psygig_video_cfg *cfg, psygig_video_handle *vh);
   
   PSYGIG_API int psygig_video_stream_stop(psygig_video_handle vh);
   
   PSYGIG_API int psygig_video_import(psygig_agent_handle handle, char *path);
    // end of video
   
   #define MAX_CACHES 5
   
   typedef struct _psygig_cpuinfo {
       uint32_t threadspercore;
       uint32_t coresperpkg;
       uint32_t numpkgs;
   
       char vendor[32];
       char model[64];
       
       char architecture[32];
       char features[128];
       enum {
           ARCH_UNKNOWN = -1,
           ARCH_X86,
           ARCH_IA64,
           ARCH_AARCH64,
           ARCH_ARM,
           ARCH_MIPS,
           ARCH_PPC
       } archtype;
       enum {
           ENDIAN_BIG,
           ENDIAN_LITTLE
       } endian;
       float clockmhz;
       union {
           struct {
               int family;
               int model;
               int stepping;
               char vendor[13];
               char brand[49];
               char uarch[32];
           } X86Info;
           struct {        
               int implementer;
               int variant;
               int part;
               int revision;
           } Aarch64Info;
           struct {
               int implementer;
               int architecture;
               int variant;
               int part;
               int revision;
           } ArmInfo;
           struct {
           } MipsInfo;
           struct {
               char platform[64];
               char model[64];
               char machine[64];
               char cpu[64];
               char isa[64];
               char uarch[64];
           } PPCInfo;
       };
       struct cache_t {
           uint8_t level;
           uint32_t size;
           uint32_t linesize;
           uint8_t associativity;
           enum {
               unified,
               instruction,
               data,
               trace,
           } type;
       } cache[MAX_CACHES];
       unsigned int numcaches;
   } psygig_cpuinfo;
   
   typedef struct _psygig_meminfo
   {
       uint64_t aveloads[3];
       uint64_t totalram;
       uint64_t freeram;
       uint64_t sharedram;
       uint64_t bufferram; 
       uint64_t totalswap;
       uint64_t freeswap;  
       uint64_t totalhigh;
       uint64_t freehigh;
       uint32_t numprocs;
   } psygig_meminfo;
   
   typedef struct _psygig_fsinfo
   {
       struct _fsinfo
       {
           char device[32];
           char mountdir[256];
           char filesystem[32];
           char mountopts[32];
           uint64_t blksize;
           uint64_t fragsize;
           uint64_t totalblks;
           uint64_t freeblks;
           uint64_t availblks;
           uint64_t totalino;
           uint64_t freeino;
           uint64_t availino;
           uint32_t fsid;
           uint32_t fsflags;
           uint32_t fnamemax;
           uint64_t size;
       } fs[10];
       unsigned int numfs; 
   } psygig_fsinfo;
   
   typedef struct _psygig_osinfo {
       char name[64];
       char fullname[64];
       char codename[64];
       unsigned int major;
       unsigned int minor;
       unsigned int patch;
       unsigned int build_number;
   
       struct {
           char name[64];
           unsigned int major;
           unsigned int minor;
           unsigned int patch;
           unsigned int build_number;
       } kernel;
   
   } psygig_osinfo;
   
   #define MAX_USB_DEVS        16
   
   typedef struct _psygig_usbinfo {
       struct {
           char product[64];
           char manufacturer[64];
           char deviceclass[64];
           char version[64];
           char serial[64];
           char usbver[16];
           uint16_t productid;
           uint16_t vendorid;
       } device[MAX_USB_DEVS];
       unsigned int numdev;    
   } psygig_usbinfo;
   
   
   #define MAX_DISKS       16
   #define MAX_PARTS       16
   
   typedef struct _psygig_diskinfo {
       struct {
           char devname[16];
           char model[64];
           char vendor[64];
           char serial[64];
           uint64_t size;
           
           struct {
               int partnum;
               uint64_t start;
               uint64_t size;          
           } partition[MAX_PARTS];
           int numparts;
       } disk[MAX_DISKS];
       unsigned int numdisks;  
   } psygig_diskinfo;
   
   #define MAX_PCI_DEVS    16
   
   typedef struct _psygig_pciinfo {
       struct {
           uint16_t domain;
           uint8_t bus;
           uint8_t dev;
           uint8_t fun;
           char vendor[64];
           char device[64];
           uint16_t vendorid;
           uint16_t deviceid;
           struct {
               uint8_t baseclass;
               uint8_t subclass;
               uint8_t progintf;
           } classcode;
           uint8_t revision;       
       } device[MAX_PCI_DEVS];
       unsigned int numdev;    
   } psygig_pciinfo;
   
   #define MAX_NET_INTF    8
   
   typedef struct _psygig_netinfo {
       struct {
           char devname[16];
           char macaddr[32];
           char ipaddr[32];
           char ip6addr[64];
       } interface[MAX_NET_INTF];
       unsigned int numintf;   
   } psygig_netinfo;
   
   typedef struct _psygig_sysinfo {
       long uptime;
       psygig_cpuinfo cpuinfo;
       psygig_meminfo meminfo;
       psygig_fsinfo fsinfo;
       psygig_osinfo osinfo;
       psygig_usbinfo usbinfo;
       psygig_diskinfo diskinfo;
       psygig_netinfo netinfo;
       psygig_pciinfo pciinfo;
   } psygig_sysinfo;
   
   PSYGIG_API int psygig_sysinfo_get(psygig_agent_handle handle, psygig_sysinfo *sysinfo);
   
   PSYGIG_API int psygig_sysinfo_export_report(psygig_agent_handle handle, char* path);
    // end of sysinfo
   
   PSYGIG_API int psygig_crash_install_core_dump_handler(psygig_agent_handle handle);
   
   PSYGIG_API int psygig_crash_enable_report_on_fatal_signal(psygig_agent_handle handle, int enable);
   
   PSYGIG_API int psygig_crash_start_crash_monitor(psygig_agent_handle handle);
    // end of crash
   
   typedef enum _psygig_benchmark_type
   {
       PSYGIG_BENCH_CPU,
       PSYGIG_BENCH_RAM,
       PSYGIG_BENCH_GPU,
       PSYGIG_BENCH_HDD,
       PSYGIG_BENCH_NET,
   } psygig_benchmark_type;
   
   PSYGIG_API int psygig_benchmark_run(psygig_agent_handle handle, psygig_benchmark_type benchmark, float *score);
   
   PSYGIG_API int psygig_benchmark_export_report(psygig_agent_handle handle, char* path);
    // end of benchmark
   
   PSYGIG_API int psygig_profile_enable_profiling(psygig_agent_handle handle, int periodms);
   
   PSYGIG_API int psygig_profile_code_begin(psygig_agent_handle handle, const char* funcname, const char* filename, unsigned int lineno);
   
   PSYGIG_API int psygig_profile_code_end(psygig_agent_handle handle);
   
   PSYGIG_API int psygig_profile_export_report(psygig_agent_handle handle, char* path);
    // end of profile
   
   typedef enum _psygig_diag_type
   {
       PSYGIG_DIAG_CPU,
       PSYGIG_DIAG_RAM,
       PSYGIG_DIAG_GPU,
       PSYGIG_DIAG_HDD,
       PSYGIG_DIAG_NET,
   } psygig_diag_type;
   
   typedef struct _psygig_diag_result
   {
       int result;
       int numerrs;
       char *errstr;
   } psygig_diag_result;
   
   PSYGIG_API int psygig_diag_run(psygig_agent_handle handle, psygig_diag_type diagnostic, psygig_diag_result *result);
   
   PSYGIG_API int psygig_diag_export_report(psygig_agent_handle handle, char* path);
    // end of diag
   
   
   #ifdef __cplusplus
   }
   #endif
   
   #endif /* PSYGIGSDK_H_ */
